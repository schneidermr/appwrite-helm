{{/* Create a secret with all the sensitive environment variable data if not exist */}}
{{- $secret := (lookup "v1" "Secret" (include "appwrite.namespace" .) (printf "%s-env" (include "appwrite.fullname" .))) }}
{{- if not $secret }}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ include "appwrite.fullname" . }}-env"
  namespace: "{{ include "appwrite.namespace" . }}"
  labels:
    app.kubernetes.io/name: "{{ include "appwrite.fullname" . }}-env"
    {{- include "appwrite.labels" . | nindent 4 }}
type: Opaque
data:
  _APP_OPENSSL_KEY_V1: {{ if .Values.environments.openssl.keyV1 }}{{ .Values.environments.openssl.keyV1 | b64enc }}{{ else }}{{ (randAlphaNum 40) | b64enc | quote }}{{ end }}
  _APP_REDIS_USER: {{ if .Values.environments.redis.username }}{{ .Values.environments.redis.username | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_REDIS_PASS: {{ if .Values.environments.redis.password }}{{ .Values.environments.redis.password | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_DB_USER: {{ if .Values.environments.database.username }}{{ .Values.environments.database.username | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_DB_PASS: {{ if .Values.environments.database.password }}{{ .Values.environments.database.password | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_DB_ROOT_PASS: {{ if .Values.environments.database.rootPassword }}{{ .Values.environments.database.rootPassword | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_S3_ACCESS_KEY: {{ if eq (lower .Values.environments.storage.device) "s3" }}{{ required "A valid access key for S3 storage is required!" .Values.environments.storage.s3.accessKey }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_S3_SECRET: {{ if eq (lower .Values.environments.storage.device) "s3" }}{{ required "A valid secret for S3 storage is required!" .Values.environments.storage.s3.secret }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_DO_SPACES_ACCESS_KEY: {{ if eq (lower .Values.environments.storage.device) "dospaces" }}{{ required "A valid access key for Do Spaces storage is required!" .Values.environments.storage.doSpaces.accessKey }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_DO_SPACES_SECRET: {{ if eq (lower .Values.environments.storage.device) "dospaces" }}{{ required "A valid secret for Do Spaces storage is required!" .Values.environments.storage.doSpaces.secret }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_BACKBLAZE_ACCESS_KEY: {{ if eq (lower .Values.environments.storage.device) "backblaze" }}{{ required "A valid access key for Backblaze storage is required!" .Values.environments.storage.backblaze.accessKey }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_BACKBLAZE_SECRET: {{ if eq (lower .Values.environments.storage.device) "backblaze" }}{{ required "A valid secret for Backblaze storage is required!" .Values.environments.storage.backblaze.secret }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_LINODE_ACCESS_KEY: {{ if eq (lower .Values.environments.storage.device) "linode" }}{{ required "A valid access key for Linode storage is required!" .Values.environments.storage.linode.accessKey }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_LINODE_SECRET: {{ if eq (lower .Values.environments.storage.device) "linode" }}{{ required "A valid secret for Linode storage is required!" .Values.environments.storage.linode.secret }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_WASABI_ACCESS_KEY: {{ if eq (lower .Values.environments.storage.device) "wasabi" }}{{ required "A valid access key for Wasabi storage is required!" .Values.environments.storage.wasabi.accessKey }}{{ else }}{{ print "" }}{{ end }}
  _APP_STORAGE_WASABI_SECRET: {{ if eq (lower .Values.environments.storage.device) "wasabi" }}{{ required "A valid secret for Wasabi storage is required!" .Values.environments.storage.wasabi.secret }}{{ else }}{{ print "" }}{{ end }}
  _APP_SMTP_USERNAME: {{ if .Values.environments.smtp.username }}{{ .Values.environments.smtp.username | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_SMTP_PASSWORD: {{ if .Values.environments.smtp.password }}{{ .Values.environments.smtp.password | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_EXECUTOR_SECRET: {{ if .Values.environments.executor.secret }}{{ .Values.environments.executor.secret | b64enc }}{{ else }}{{ (randAlphaNum 40) | b64enc | quote }}{{ end }}
  _APP_DOCKER_HUB_USERNAME: {{ if .Values.environments.dockerHub.username }}{{ .Values.environments.dockerHub.username | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_DOCKER_HUB_PASSWORD: {{ if .Values.environments.dockerHub.password }}{{ .Values.environments.dockerHub.password | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_VCS_GITHUB_CLIENT_SECRET: {{ if .Values.environments.vcs.github.clientSecret }}{{ .Values.environments.vcs.github.clientSecret | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_VCS_GITHUB_WEBHOOK_SECRET: {{ if .Values.environments.vcs.github.webhookSecret }}{{ .Values.environments.vcs.github.webhookSecret | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_MIGRATIONS_FIREBASE_CLIENT_SECRET: {{ if .Values.environments.migrations.firebase.clientSecret }}{{ .Values.environments.migrations.firebase.clientSecret | b64enc }}{{ else }}{{ print "" }}{{ end }}
  _APP_ASSISTANT_OPENAI_API_KEY: {{ if .Values.environments.assistant.openAi.apiKey }}{{ .Values.environments.assistant.openAi.apiKey | b64enc }}{{ else }}{{ print "" }}{{ end }}
{{- end }}